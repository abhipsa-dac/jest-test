Matchers

Jest uses "matchers" to let you test values in different ways. This document will introduce some commonly used matchers.

-   Common Matchers

    1. toBe
        toBe uses Object.is to test exact equality. That's why we use to compare for Number.
    
    2. toEqual
        toEqual recursively checks every field of an object or array.

        toEqual ignores object keys with undefined properties, undefined array items, array sparseness, or object type mismatch.

    3. toStrictEqual
        toStrictEqual compares whole object including undefined.

-   Truthiness

    In tests, you sometimes need to distinguish between undefined, null, and false, but you sometimes do not want to treat these differently.

    1. toBeNull : matches only null

    2. toBeUndefined : matches only undefined

    3. toBeDefined : is the opposite of toBeUndefined

    4. toBeTruthy : matches anything that an if statement treats as true

    5. toBeFalsy : matches anything that an if statement treats as false

- Numbers

    1. toBeGreaterThan

    2. toBeGreaterThanOrEqual

    3. toBeLessThan

    4. toBeLessThanOrEqual

    5. toBeCloseTo : For floating point equality, use toBeCloseTo instead of toEqual, because you don't want a test to depend on a tiny rounding error.

- Strings

    1. toMatch

- Arrays

    1. toContain : You can check if an array or iterable contains a particular item using toContain

- Exceptions

    1. toThrow : If you want to test whether a particular function throws an error when it's called, use toThrow.

Ref Link : https://jestjs.io/docs/using-matchers